#!/bin/bash

PREFIX="/usr/local/adam"

function bctl_cleanup() {
  make clean
  if  [ -f install_manifest.txt ] ;then
    rm install_manifest.txt
  fi

  rm CMakeCache.txt
  rm -rf CMakeFiles
  rm cmake_install.cmake
  rm Makefile
  rm tests/test_*
  rm tests/CMakeCache.txt
  rm tests/cmake_install.cmake
  rm -rf tests/CMakeFiles

}

function bctl_cmake() {
  cmake -DCMAKE_CXX_COMPILER="/usr/bin/clang++" -DCMAKE_CXX_FLAGS="-O3 -std=c++11 -stdlib=libc++ -fPIC" -DCMAKE_INSTALL_PREFIX=$PREFIX
}

function bctl_cmake_debug() {
  cmake -DCMAKE_CXX_COMPILER="/usr/bin/clang++" -DCMAKE_CXX_FLAGS="-g -std=c++11 -stdlib=libc++ -fPIC" -DCMAKE_INSTALL_PREFIX=$PREFIX
}


function bctl_compile() {
  make
}

function bctl_compile_all() {
  make
  cd cfiles
  ./compile.sh
  cd ..
}

function bctl_release() {
  cd cfiles
  ./release.sh
  cd ..
}

function bctl_append_buildnum() {

  bnum=`cat .buildctl|grep build_number|sed 's/build_number//'`
  bnum=`expr $bnum + 1`

  echo "Running build number $bnum"
  sed "s/##BNUM##/$bnum/" src/lib/constants.h.tpl > src/lib/constants.h

  sed "s/^build_number.*$/build_number $bnum/" -i .buildctl
  
}


function bctl_install() {
  make install
}

if [ $# -ge 2 ]
then
  PREFIX=$2
fi

case $1 in

  cleanup)
    bctl_cleanup
  ;;

  buildall)
    bctl_append_buildnum
    bctl_cmake
    bctl_compile_all
    bctl_release
  ;;

  buildall-debug)
    bctl_append_buildnum
    bctl_cmake_debug
    bctl_compile_all
    bctl_release
  ;;
  

  install)
    bctl_install
    if [ $# -ge 3 ]
    then
      tar -xvzf $3 -C$2
    fi
  ;;

esac
