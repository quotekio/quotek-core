#!/bin/bash

PREFIX="/usr/local/qate"


function usage() {

  echo -e "\nUsage: $0 <command [command_args]>\n"

  echo "Commands:"
  echo -e "\n\tbuildall:\n\t\tBuilds all the qate components at once."
  echo -e "\n\tinstall:\n\t\tPerforms installation of qate in /usr/local."
  echo -e "\n\tcleanup:\n\t\tCleans all the build files."
  echo -e "\n\tinit:\n\t\tInstalls the build toolchain and fetches the required 3rd part libs"
  echo -e "\n\tinitdb <db_type>:\n\t\tInstalls specified Database. Db types: influx08, influx013, postgres."
  echo -e "\n\tuniverse <db_type> <httpd_type>:\n\t\tBuilds and install the full Quotek env."
  echo -e "\n\tqwc <httpd_type>:\n\t\tBuilds and configure Web controller. httpd_types: nginx."

}

########## BUILD FUNCTIONS ##########

# Builds The QWC Web Controller.
function bctl_qwc() {
  echo "Installing QWC With $1"
  pushd ../qwc
  ./init.sh $1
  ./install.sh
  popd
}

# Builds the IG Markets REST Connector.
function bctl_igconnector() {
  pushd ../igconnector
  git checkout master
  cmake . && make && make install
  popd
}

# Installs and configure the specified Database.
function bctl_initdb() {

  git clone https://github.com/quotekio/db-archive
  pushd ./db-archive

  case $1 in

    influx08)
      dpkg -i influxdb_0.8.8_amd64.deb
      apt-get -f install
      /etc/init.d/influxdb start
    ;;

    influx013)
      dpkg -i influxdb_0.13.0_amd64.deb
      apt-get -f install
      /etc/init.d/influxdb start
    ;;

    postgres)
      apt-get -y update
      apt-get -y install postgresql-9.5 libpqxx-dev      
    ;;
  esac

  popd
  rm -rf db-archive
}

# Installs the build toolchain along 
# with all the required 3rd part libs. 
function bctl_init() {

  apt-get -y update
  apt-get -y install build-essential g++ cmake libasio-dev libcurl4-openssl-dev
  git clone https://github.com/quotekio/rapidjson
  git clone https://github.com/quotekio/rapidxml
  git clone https://github.com/quotekio/websocketpp

  cp -r rapidjson/include/rapidjson /usr/include/
  cp -r rapidxml /usr/include/

  ln -s `pwd`/sdk/src/eigen3/Eigen /usr/include/Eigen

  pushd websocketpp
  cmake .
  make && make install
  popd  

  rm -rf websocketpp rapidjson rapidxml
}

# Performs the ultimate post-install tasks for qate and qwc.
function bctl_finish() {
  mkdir /tmp/qate
  touch /var/log/qate.log
  chown -R www-data /tmp/qate
  chown www-data /var/log/qate.log
  echo '/usr/local/qate/lib' >> /etc/ld.so.conf.d/qate.conf
  chmod +x /etc/init.d/qate
  ldconfig
}

# Cleans all the binaries object and intermediary build files.
function bctl_cleanup() {
  make clean
  if  [ -f install_manifest.txt ] ;then
    rm install_manifest.txt
  fi

  rm CMakeCache.txt
  rm -rf CMakeFiles
  rm cmake_install.cmake
  rm Makefile
  rm tests/test_*
  rm tests/CMakeCache.txt
  rm tests/cmake_install.cmake
  rm -rf tests/CMakeFiles
  
  rm install/compile/headers/*.h

  bctl_sdk_cleanup

}

# Builds and installs the Quotek SDK.
function bctl_sdk_compile() {
  cd sdk
  cmake . && make -j3
  make install
  cd ..
}

# Cleans the Quotek SDK build files.
function bctl_sdk_cleanup() {
  cd sdk
  ./clean.sh
  cd ..
}

# Creates Makefile for qate.
function bctl_cmake() {
  cmake -DCMAKE_INSTALL_PREFIX=$PREFIX .
}

# Builds qate.
function bctl_compile() {
  make -j3
}

# Builds qate along with SDK.
function bctl_compile_all() {
  bctl_sdk_compile
  make -j3
}

# Increments qate build number and puts it inside code.
function bctl_append_buildnum() {

  bnum=`cat .buildctl|grep build_number|sed 's/build_number//'`
  bnum=`expr $bnum + 1`

  echo "Running build number $bnum"
  sed "s/##BNUM##/$bnum/" src/lib/version.h.tpl > src/lib/version.h

  sed "s/^build_number.*$/build_number $bnum/" -i .buildctl
  
}

# Installs qate in /usr/local.
function bctl_install() {
  make install
}


########## ENTRY POINT ###########

echo -e "\nQATE SOLUTION BUILDER V2.1 -- Copyright 2013-2017, Quotek"
echo    "========================================================="

if [ $# -lt 2 ]
then
  usage 
  exit 1
fi

case $1 in

  init)
    bctl_init
  ;;

  initdb)
    bctl_initdb $2
  ;;

  cleanup)
    bctl_cleanup
  ;;

  buildall)
    bctl_append_buildnum
    bctl_cmake
    bctl_compile_all
  ;;


  qwc)
    bctl_qwc $2
  ;;

  universe)

    if [ ! -d ../qwc ]; then
      echo '[ERROR] qwc not present, leaving..'
      exit
    fi

    if [ ! -d ../igconnector ]; then
      echo '[ERROR] igconnector not present, leaving..'
      exit
    fi

    bctl_init
    bctl_initdb $2
    $0 buildall    
    make install
    bctl_qwc $3
    bctl_igconnector
    bctl_finish
  ;;

  buildall-debug)
    bctl_append_buildnum
    bctl_cmake
    bctl_compile_all
  ;;
  
  install)
    bctl_install
    if [ $# -ge 3 ]
    then
      tar -xvzf $3 -C$2
    fi
  ;;

esac
